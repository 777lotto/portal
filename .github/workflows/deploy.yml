name: Deploy All Services

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # This top-level build is crucial. It builds all packages in the correct order.
      - name: Build Shared Package
        run: pnpm --filter @portal/shared build

      - name: Build & Typecheck Workers
        run: pnpm --filter "./{worker,payment,notification}" build

      - name: Build Frontend
        run: pnpm --filter frontend build

      - name: Type check all packages (allow warnings)
        run: |
          echo "Running type checks (warnings allowed)..."
          # This is now somewhat redundant if your build scripts include type checking,
          # but it's good for an explicit check.
          pnpm --filter './**' typecheck || echo "TypeScript checks completed with warnings"
        continue-on-error: true

      - name: Apply D1 Migrations
        run: |
          echo "Applying D1 migrations..."
          # The filter ensures dependencies are built before running the command
          pnpm --filter worker exec wrangler d1 migrations apply gutter_db --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Notification Worker
        run: |
          echo "Deploying notification worker..."
          # The filter will build @portal/shared before deploying notification
          pnpm --filter notification deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Payment Worker
        run: |
          echo "Deploying payment worker..."
          # The filter will build @portal/shared before deploying payment
          pnpm --filter payment deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Main Worker
        run: |
          echo "Deploying main worker..."
          # The filter will build @portal/shared before deploying worker
          pnpm --filter worker deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Frontend Worker
        run: |
          echo "Building and deploying frontend worker..."
          # The filter will build @portal/shared before deploying frontend
          pnpm --filter frontend deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          VITE_API_URL: "https://portal.777.foo/api"
          VITE_TURNSTILE_SITE_KEY: ${{ secrets.VITE_TURNSTILE_SITE_KEY }}
          VITE_STRIPE_PK: ${{ secrets.VITE_STRIPE_PK }}

      - name: Post-deployment health checks
        run: |
          echo "Running post-deployment health checks..."
          sleep 15

          echo "Checking frontend..."
          curl -f https://portal.777.foo/ || echo "Frontend health check failed"

          echo "Checking main worker..."
          curl -f https://portal.777.foo/api/ping || echo "Main worker health check failed"

          echo "Deployment completed!"
        continue-on-error: true
