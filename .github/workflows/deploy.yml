name: Deploy All Services

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Cloudflare
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build shared package
        run: cd packages/shared && pnpm run build
        
      - name: Type check all packages
        run: pnpm run typecheck
        continue-on-error: true
        
      - name: Apply D1 Migrations
        run: |
          echo "Applying D1 migrations..."
          cd worker && npx wrangler d1 migrations apply gutter_db --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
      - name: Deploy Notification Worker  
        run: |
          echo "Deploying notification worker..."
          cd notification
          
          # Only set secrets if they exist and are not placeholder values
          if [ ! -z "$AWS_ACCESS_KEY_ID" ] && [ "$AWS_ACCESS_KEY_ID" != "****" ] && [ "$AWS_ACCESS_KEY_ID" != "YOUR_KEY_HERE" ]; then
            echo "Setting AWS_ACCESS_KEY_ID secret..."
            echo "$AWS_ACCESS_KEY_ID" | npx wrangler secret put AWS_ACCESS_KEY_ID
          else
            echo "Skipping AWS_ACCESS_KEY_ID (not set or is placeholder)"
          fi
          
          if [ ! -z "$AWS_SECRET_ACCESS_KEY" ] && [ "$AWS_SECRET_ACCESS_KEY" != "****" ] && [ "$AWS_SECRET_ACCESS_KEY" != "YOUR_SECRET_HERE" ]; then
            echo "Setting AWS_SECRET_ACCESS_KEY secret..."
            echo "$AWS_SECRET_ACCESS_KEY" | npx wrangler secret put AWS_SECRET_ACCESS_KEY  
          else
            echo "Skipping AWS_SECRET_ACCESS_KEY (not set or is placeholder)"
          fi
          
          if [ ! -z "$VOIPMS_USERNAME" ] && [ "$VOIPMS_USERNAME" != "****" ]; then
            echo "Setting VOIPMS_USERNAME secret..."
            echo "$VOIPMS_USERNAME" | npx wrangler secret put VOIPMS_USERNAME
          else
            echo "Skipping VOIPMS_USERNAME (not set or is placeholder)"
          fi
          
          if [ ! -z "$VOIPMS_PASSWORD" ] && [ "$VOIPMS_PASSWORD" != "****" ]; then
            echo "Setting VOIPMS_PASSWORD secret..."
            echo "$VOIPMS_PASSWORD" | npx wrangler secret put VOIPMS_PASSWORD
          else
            echo "Skipping VOIPMS_PASSWORD (not set or is placeholder)"
          fi
          
          # Deploy the worker
          npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          VOIPMS_USERNAME: ${{ secrets.VOIPMS_USERNAME }}
          VOIPMS_PASSWORD: ${{ secrets.VOIPMS_PASSWORD }}
          
      - name: Deploy Payment Worker
        run: |
          echo "Deploying payment worker..."
          cd payment
          npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
      - name: Deploy Main Worker
        run: |
          echo "Deploying main worker..."
          cd worker
          
          # Set required secrets with validation
          if [ ! -z "$JWT_SECRET" ] && [ "$JWT_SECRET" != "****" ]; then
            echo "Setting JWT_SECRET..."
            echo "$JWT_SECRET" | npx wrangler secret put JWT_SECRET
          else
            echo "ERROR: JWT_SECRET is required but not set properly"
            exit 1
          fi
          
          if [ ! -z "$STRIPE_SECRET_KEY" ] && [ "$STRIPE_SECRET_KEY" != "****" ]; then
            echo "Setting STRIPE_SECRET_KEY..."
            echo "$STRIPE_SECRET_KEY" | npx wrangler secret put STRIPE_SECRET_KEY
          else
            echo "ERROR: STRIPE_SECRET_KEY is required but not set properly"
            exit 1
          fi
          
          if [ ! -z "$STRIPE_WEBHOOK_SECRET" ] && [ "$STRIPE_WEBHOOK_SECRET" != "****" ]; then
            echo "Setting STRIPE_WEBHOOK_SECRET..."
            echo "$STRIPE_WEBHOOK_SECRET" | npx wrangler secret put STRIPE_WEBHOOK_SECRET
          else
            echo "WARNING: STRIPE_WEBHOOK_SECRET not set"
          fi
          
          if [ ! -z "$TURNSTILE_SECRET_KEY" ] && [ "$TURNSTILE_SECRET_KEY" != "****" ]; then
            echo "Setting TURNSTILE_SECRET_KEY..."
            echo "$TURNSTILE_SECRET_KEY" | npx wrangler secret put TURNSTILE_SECRET_KEY
          else
            echo "ERROR: TURNSTILE_SECRET_KEY is required but not set properly"
            exit 1
          fi
          
          # Deploy the worker
          npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          TURNSTILE_SECRET_KEY: ${{ secrets.TURNSTILE_SECRET_KEY }}
          
      - name: Build and Deploy Frontend Worker
        run: |
          echo "Building and deploying frontend worker..."
          cd frontend
          
          # Build the React app with environment variables
          echo "Building React app with environment variables..."
          export VITE_API_URL="https://portal.777.foo/api"
          export VITE_TURNSTILE_SITE_KEY="${{ secrets.VITE_TURNSTILE_SITE_KEY }}"
          export VITE_STRIPE_PK="${{ secrets.VITE_STRIPE_PK }}"
          
          # Build the React app
          pnpm run build
          
          # Verify the dist directory exists
          if [ ! -d "dist" ]; then
            echo "ERROR: Frontend build failed - dist directory not found"
            exit 1
          fi
          
          echo "Frontend build successful, deploying with Wrangler..."
          npx wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          VITE_API_URL: "https://portal.777.foo/api"
          VITE_TURNSTILE_SITE_KEY: ${{ secrets.VITE_TURNSTILE_SITE_KEY }}
          VITE_STRIPE_PK: ${{ secrets.VITE_STRIPE_PK }}

      - name: Post-deployment health checks
        run: |
          echo "Running post-deployment health checks..."
          sleep 15
          
          echo "Checking frontend..."
          curl -f https://portal.777.foo/ || echo "Frontend health check failed"
          
          echo "Checking main worker..."
          curl -f https://portal.777.foo/api/ping || echo "Main worker health check failed"
          
          echo "Checking notification worker..."
          curl -f https://portal.777.foo/api/notifications/ping || echo "Notification worker health check failed"
          
          echo "Checking payment worker..."
          curl -f https://portal.777.foo/api/payment/ping || echo "Payment worker health check failed"
          
          echo "Deployment completed!"
        continue-on-error: true
