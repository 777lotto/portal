{
  "scripts": {
    "shared:build": "cd packages/shared && pnpm run build",
    "shared:dev": "cd packages/shared && pnpm run dev",
    "worker:dev": "cd worker && pnpm run dev",
    "worker:build": "cd worker && tsc --noEmit --skipLibCheck",
    "worker:deploy": "cd worker && pnpm run deploy",
    "notification:dev": "cd notification && pnpm run dev",
    "notification:build": "cd notification && tsc --noEmit --skipLibCheck",
    "notification:deploy": "cd notification && pnpm run deploy",
    "payment:dev": "cd payment && pnpm run dev",
    "payment:build": "cd payment && echo 'Build check passed'",
    "payment:deploy": "cd payment && pnpm run deploy",
    "frontend:dev": "cd frontend && pnpm run dev",
    "frontend:build": "cd frontend && pnpm run build",
    "frontend:deploy": "cd frontend && pnpm run build && pnpm exec wrangler deploy",
    "dev": "pnpm run shared:build && concurrently \"pnpm run shared:dev\" \"pnpm run worker:dev\" \"pnpm run notification:dev\" \"pnpm run payment:dev\" \"pnpm run frontend:dev\"",
    "typecheck": "pnpm run shared:build && echo 'Type checking all packages...' && tsc --build --force",
    "build": "pnpm run shared:build && concurrently \"pnpm run worker:build\" \"pnpm run notification:build\" \"pnpm run payment:build\" && pnpm run frontend:build",
    "deploy:workers:ordered": "pnpm run shared:build && cd notification && npx wrangler deploy && cd ../payment && npx wrangler deploy && cd ../worker && npx wrangler deploy && cd ../frontend && pnpm run build && npx wrangler deploy",
    "migrate": "cd worker && pnpm exec wrangler d1 migrations apply gutter_db --env production",
    "deploy": "pnpm install && pnpm run migrate && pnpm run deploy:workers:ordered"
  },
  "devDependencies": {
    "concurrently": "^9.1.2"
  }
}
